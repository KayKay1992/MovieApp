IMPLEMENTING TMDB API CALL INTEGRATION

Go to tmdb site and head to api reference, click on nodejs we will use it to make the call, then get your api key it will ask you to login or create new account if you dont already have. go back to the starter guide and click on API link. Then you have api read access token copy it and do same thing for api key.

we will use the endpoint for discoering movie, Go to api reference, so search for discover movie, click on the discover movie instead 

API Read Access Token
eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJhMjhlNmRiYWQ1YTBiNjUwYmRkYTU5N2FkYjliMmUxNiIsIm5iZiI6MTc0MzA2ODQyOC4xODcsInN1YiI6IjY3ZTUxZDBjMjU4MGVlZjFlODAwM2MxNCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.PFCh--An3G0T3GgRQM-UpRHF5xl85e5ZkopnJ1EljpA


API Key
a28e6dbad5a0b650bdda597adb9b2e16

*We will be using the end point of discovering movies  so search for discover-movie, then select discover movie instead. 
*Then copy the entire fetching request, create a new folder in our project called services where we created a new file api.ts in it paste the code you copied and comment it out.
* We created .env file where we registered the API READ ACCESS TOKEN.
* Now instead of making one single request lets form a tmdb configuration which makes it reusable...ofcourse we did the tmdb confid at api.ts

EXPLAINING THE API.TS FILE 

Here's a 10-line explanation of the code you shared:

1. `TMDB_CONFIG` is an object storing the base URL, API key, and default headers for communicating with The Movie Database (TMDB) API.
2. The API key is read from an environment variable: `process.env.EXPO_PUBLIC_MOVIE_API_KEY`.
3. The headers include `accept: 'application/json'` and an `Authorization` token using a Bearer scheme.
4. `fetchMovies` is an asynchronous function that takes an object with a `query` string.
5. If `query` is provided, it constructs a search endpoint URL for searching movies; otherwise, it uses a default endpoint to fetch popular movies.
6. The function calls the `fetch` API with the correct endpoint, using the GET method and headers from `TMDB_CONFIG`.
7. It checks if the HTTP response was unsuccessful (`!response.ok`) and throws an error with the response status text.
8. If the response is OK, it parses the JSON body using `await response.json()`.
9. The parsed JSON contains metadata and movie results; the function returns only the `results` array.
10. This function is useful for dynamically fetching movies either by keyword search or by popularity ranking.

Let me know if you'd like this explained in even simpler terms or with comments inline in the code.
