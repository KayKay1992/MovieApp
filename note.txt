React Native Components.

Basic React Native component. (Toggle and Statusbar  component)

changes made 

Sure! Let’s **extensively explain** both the `StatusBar` and `Switch` components in **React Native**, including:

* ✅ What they are
* 🔧 How they work
* 🧠 Use cases
* 🛠 Best practices
* 📦 Platform differences
* 💡 Real-world examples

---

## 🔘 1. `Switch` Component (React Native)

### ✅ What is it?

`Switch` is a simple UI component that represents a **toggleable option** — like a light switch. It’s commonly used for **boolean settings** such as:

* Enable notifications
* Turn on dark mode
* Activate airplane mode

It looks like this on most devices:

**`OFF`** ☐ → **`ON`** ☑️ (sliding interaction)

---

### 🔧 Basic Usage:

```tsx
import React, { useState } from 'react';
import { View, Text, Switch } from 'react-native';

const MySwitchExample = () => {
  const [isEnabled, setIsEnabled] = useState(false);

  return (
    <View>
      <Text>Enable Dark Mode:</Text>
      <Switch
        value={isEnabled}
        onValueChange={() => setIsEnabled(previous => !previous)}
      />
    </View>
  );
};
```

---

### 🔍 Props (with Explanation):

| Prop            | Type       | Description                                                            |
| --------------- | ---------- | ---------------------------------------------------------------------- |
| `value`         | `boolean`  | Current state of the switch (on/off)                                   |
| `onValueChange` | `function` | Function to run when the user toggles the switch                       |
| `thumbColor`    | `string`   | Color of the circle (thumb)                                            |
| `trackColor`    | `object`   | Colors of the track for both states: `{ false: color1, true: color2 }` |
| `disabled`      | `boolean`  | If `true`, disables interaction                                        |

---

### 🌐 Platform Differences:

* **Android & iOS** both support the `Switch` component.
* Visuals vary slightly (iOS has a more rounded toggle).
* On iOS, the `thumbColor` may not be customizable on older versions.

---

### 🧠 Use Cases:

* App settings (e.g., sound, Bluetooth)
* Preferences (e.g., enable biometric login)
* UI themes (e.g., dark mode toggle)

---

### 🛠 Best Practices:

* Always label your switch (don’t leave users guessing)
* Provide immediate visual feedback when toggled
* Avoid using for more than simple binary decisions

---

## 📶 2. `StatusBar` Component (React Native)

### ✅ What is it?

The **Status Bar** is the system UI at the top of your screen showing:

* Time
* Battery status
* Network indicators
* Notifications

In React Native, the `StatusBar` component allows developers to **control its appearance** to better match your app's UI.

---

### 🔧 Basic Usage:

```tsx
import { StatusBar } from 'react-native';

<StatusBar
  barStyle="light-content"
  backgroundColor="#000"
/>
```

---

### 🔍 Props (Detailed):

| Prop              | Type      | Description                                                                    |
| ----------------- | --------- | ------------------------------------------------------------------------------ |
| `barStyle`        | `string`  | Style of text/icons. Options: `'default'`, `'light-content'`, `'dark-content'` |
| `backgroundColor` | `string`  | Changes the background color (Android only)                                    |
| `hidden`          | `boolean` | If `true`, hides the status bar entirely                                       |
| `translucent`     | `boolean` | If `true`, allows content to render under it (Android only)                    |
| `animated`        | `boolean` | If `true`, applies animation to changes (iOS only)                             |

---

### 🌐 Platform Differences:

| Feature           | Android | iOS   |
| ----------------- | ------- | ----- |
| `backgroundColor` | ✅ Yes   | ❌ No  |
| `translucent`     | ✅ Yes   | ❌ No  |
| `barStyle`        | ✅ Yes   | ✅ Yes |
| `hidden`          | ✅ Yes   | ✅ Yes |

---

### 🧠 Use Cases:

* Match the status bar with your app theme
  (dark bar for dark theme, light for light theme)
* Hide it for full-screen videos or splash screens
* Use `translucent` when using background images at the top

---

### 🛠 Best Practices:

* Set `barStyle` according to your background color for contrast (e.g., dark background → `light-content`)
* Avoid hiding it unnecessarily (it contains essential info for users)
* Animate changes on iOS to maintain smooth UI transitions

---

### 💡 Real-World Example

```tsx
<StatusBar
  barStyle={isDarkMode ? 'light-content' : 'dark-content'}
  backgroundColor={isDarkMode ? '#121212' : '#ffffff'}
  translucent={true}
/>
```

This snippet:

* Adapts to dark mode
* Makes the status bar semi-transparent on Android
* Matches theme without hiding system info

---

## 🧾 Summary Table

| Component   | Purpose            | Customizable | Platforms   | Common Use               |
| ----------- | ------------------ | ------------ | ----------- | ------------------------ |
| `Switch`    | On/Off toggle      | ✅ Yes        | Android/iOS | Dark mode, settings      |
| `StatusBar` | Control system bar | ✅ Yes        | Android/iOS | Theming, fullscreen apps |

---

If you want, I can also show you how to **combine** these two: for example, toggling a `Switch` that updates the `StatusBar` style dynamically — like dark mode toggle with UI + status bar syncing.

Would you like that?
