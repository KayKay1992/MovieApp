

DEVELOP SEARCH SCREEN

Things we learnt
1. We recapped what it means to create a react native screen using the search.tsx file.
2. we used our custom hook useFetch to fetch data from the 3rd party api, changes it based on the search query and also implemented debounce so that the api wont be making request whenever a user type any alphabelt .
3. we also learnt how to use flatlist component with all the props to properly render the layout.

Explaining the saerch.tsx file 

Here’s an **extensive 10-line explanation** of the `search` component:

1. **Imports**: The component pulls in `MovieCard`, `SearchBar`, custom icons, images, and services for fetching movies, alongside core React and React Native components.

2. **State Management**: It uses `useState` to store `searchQuery`, which holds the user’s current input in the search field.

3. **Data Fetching**: `useFetch` is a custom hook that fetches movie data based on the `searchQuery`, but it's **initially disabled** by passing `false`.

4. **Search Debounce**: A `useEffect` watches for changes to `searchQuery`, and debounces API calls by 700ms to avoid excessive fetching while typing.

5. **Conditional Fetching**: If `searchQuery` isn't empty, it fetches movies with `loadMovies()`; otherwise, it calls `reset()` to clear results.

6. **UI Layout**: The root `View` wraps a background image and a `FlatList`, which displays movie results using the `MovieCard` component in 3 columns.

7. **Header Component**: The list’s header shows a logo, the `SearchBar` input, and conditional rendering of loading indicators, error messages, or search result titles.

8. **SearchBar Functionality**: The search bar is a controlled component tied to `searchQuery` and updates via `setSearchQuery`.

9. **Empty State**: If no movies are found (and it's not loading or in error), a fallback message is shown based on whether the user has typed a query.

10. **Rendering**: Results are neatly styled using utility classes (likely via `nativewind`), with responsive spacing and colors based on app theme.

Let me know if you'd like a visual breakdown or optimization suggestions!
