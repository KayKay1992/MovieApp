React Native Components.

Basic React Native component. (TouchableHighlight component)

changes made 

Replaced TouchableOpacity with TouchableHighlight:
In the button section, TouchableOpacity was replaced with TouchableHighlight.
The onPress prop and style={styles.button} remain unchanged to maintain the same functionality and appearance.
Added underlayColor:
Added underlayColor="#e64a19" (a darker orange) to TouchableHighlight to specify the background color that appears when the button is pressed, providing visual feedback.
Updated Imports:
Replaced TouchableOpacity with TouchableHighlight in the import statement from 'react-native'.
Retained Alert and Other Components:
The Alert component and handlePress function remain unchanged, as they were not requested to be removed.
The rest of the code (header, card, footer) is unchanged to maintain the original structure.
Explanation of TouchableHighlight
What is TouchableHighlight?
Definition: TouchableHighlight is a React Native component that makes its child components touchable and provides visual feedback by highlighting the background with a specified color when pressed. It’s commonly used for buttons or interactive elements where a clear visual change (e.g., background color shift) is desired.
Purpose:
Adds touchable behavior to UI elements, similar to TouchableOpacity.
Provides visual feedback by changing the background to the underlayColor when pressed, making it ideal for buttons or cards where a color change is more noticeable than an opacity fade.
Supports event handlers like onPress and onLongPress for user interactions.
How it Differs from TouchableOpacity:
Feedback Mechanism:
TouchableOpacity: Reduces opacity (fades) when pressed, controlled by activeOpacity (e.g., activeOpacity={0.2} for 20% opacity).
TouchableHighlight: Changes the background to a specified underlayColor when pressed, leaving the child components’ opacity unchanged.
Use Cases:
Use TouchableOpacity for subtle, fade-based feedback (e.g., modern flat buttons).
Use TouchableHighlight for prominent background color changes (e.g., traditional buttons or highlighted cards).
Performance: Both are lightweight, but TouchableHighlight may be slightly less performant in complex layouts due to background rendering.
Key Properties
onPress: Function called when the component is tapped.
onLongPress: Function triggered on a prolonged press.
underlayColor: The background color shown when the component is pressed (e.g., #e64a19 in the code).
style: Applies styles to the touchable area (e.g., background color, padding, border radius).
disabled: A boolean to disable interaction (e.g., disabled={true}).
activeOpacity: Not used in TouchableHighlight (specific to TouchableOpacity).
Accessibility Props: Supports accessibilityLabel, accessibilityRole="button", etc., for screen reader compatibility.


Summary
TouchableHighlight:
A touchable wrapper that highlights the background with underlayColor when pressed.
Replaced TouchableOpacity in the code, using underlayColor="#e64a19" for a darker orange highlight.
Supports onPress, onLongPress, disabled, and accessibility props.
Ideal for prominent visual feedback via background color changes.
Comparison to TouchableOpacity:
TouchableOpacity fades the entire component (opacity change).
TouchableHighlight changes the background color, keeping child components (e.g., Text) fully opaque.
Usage in Code: The "Press Me" button uses TouchableHighlight to trigger an Alert, with a darker orange highlight when pressed.
If you encounter issues or want to explore more TouchableHighlight features (e.g., animations, custom feedback), please share:

Your package.json.
Output of npx expo --version and node -v.
Any errors when running the code.
Your app.json or app.config.js (if using expo-router).
This will help ensure the code runs smoothly in your environment.

