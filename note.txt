React Native Components.

Routing and Navigation (Grouping our Route within an  application)

Grouping routes in a React Native application is a powerful way to organize navigation, improve modularity, and enhance user experience. Using React Navigation, you can group related routes to share a common navigation structure, such as a tab bar, drawer, or nested stack navigators. This is particularly useful for your mobile_movie_app, where you might want to group routes like Home, Search, and Favorites under a tab navigator, while keeping other routes like MovieDetails or Onboarding in a separate stack navigator.

1. What is Route Grouping?
Route grouping in React Navigation involves organizing related screens under a single navigator (e.g., tab, stack, or drawer) to:

Share a common UI (e.g., a tab bar or header).
Simplify navigation logic by nesting navigators.
Improve code organization by separating concerns (e.g., main app vs. onboarding).
Enhance user experience with intuitive navigation patterns.
For example, in mobile_movie_app:

Main App Group: Home, Search, Favorites in a tab navigator.
Details Group: MovieDetails in a stack navigator for drill-down navigation.
Onboarding Group: Onboarding in a separate stack for first-time users.

Basic Structure
Hereâ€™s a common grouping pattern for mobile_movie_app:

Root Stack Navigator: Handles top-level routes (Onboarding, Main, MovieDetails).
Main Tab Navigator: Groups Home, Search, and Favorites.
Nested Stack Navigator (optional): For specific flows within tabs (e.g., a stack for Search results).

EXAMPLE STEPS

1. we cleaned up ore project by removing the last example.
2. We created a (tabs) folder, in there we created a new _layout.tsx, 
3. homepage is part of tabs layout so we moved the index.tsx into (tabs) folder. and we further created another files for the tabs group which include profile.tsx, saved.tsx, search.tsx.

4. we created another folder for movies, then in movies folder we created a dynamic file for movieDetails [id].tsx

5. in _layout which is at the app directory we registered the 2 group routes (tabs and movies) using the stack.screen and we hid the header, by making header shown to false.

6. in _layout which is in (tabs) directory we used the tab component wrapping the tabs.screen where we set the title to Home and also hid the title by setting headerShown to false.

7.dont forget all the files should be set with boiler plate 

then save and refresh your app check for the changes and the tabs at the bottom and the headers are hidden.